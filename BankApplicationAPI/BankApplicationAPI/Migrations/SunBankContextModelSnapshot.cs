// <auto-generated />
using System;
using BankApplicationAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankApplicationAPI.Migrations
{
    [DbContext(typeof(SunBankContext))]
    partial class SunBankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankApplicationAPI.Models.Account", b =>
                {
                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<byte?>("AccountStatusTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("AccountStatusTypeID");

                    b.Property<decimal?>("CurrentBalance")
                        .HasColumnType("money");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<byte?>("InterestSavingsRateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("InterestSavingsRateID");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountStatusTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InterestSavingsRateId");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            AccountStatusTypeId = (byte)1,
                            CurrentBalance = 5000m,
                            CustomerId = "C111111",
                            InterestSavingsRateId = (byte)1
                        },
                        new
                        {
                            AccountId = 2,
                            AccountStatusTypeId = (byte)2,
                            CurrentBalance = 10000m,
                            CustomerId = "C111112",
                            InterestSavingsRateId = (byte)1
                        },
                        new
                        {
                            AccountId = 3,
                            AccountStatusTypeId = (byte)3,
                            CurrentBalance = 7500m,
                            CustomerId = "C111113",
                            InterestSavingsRateId = (byte)2
                        },
                        new
                        {
                            AccountId = 4,
                            AccountStatusTypeId = (byte)1,
                            CurrentBalance = 15000m,
                            CustomerId = "C111114",
                            InterestSavingsRateId = (byte)3
                        },
                        new
                        {
                            AccountId = 5,
                            AccountStatusTypeId = (byte)2,
                            CurrentBalance = 2000m,
                            CustomerId = "C111115",
                            InterestSavingsRateId = (byte)2
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.AccountStatusType", b =>
                {
                    b.Property<byte?>("AccountStatusTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("AccountStatusTypeID");

                    b.Property<string>("AccountStatusDescription")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("AccountStatusTypeId");

                    b.ToTable("AccountStatusType", (string)null);

                    b.HasData(
                        new
                        {
                            AccountStatusTypeId = (byte)1,
                            AccountStatusDescription = "Active"
                        },
                        new
                        {
                            AccountStatusTypeId = (byte)2,
                            AccountStatusDescription = "Closed"
                        },
                        new
                        {
                            AccountStatusTypeId = (byte)3,
                            AccountStatusDescription = "Suspended"
                        },
                        new
                        {
                            AccountStatusTypeId = (byte)4,
                            AccountStatusDescription = "Pending"
                        },
                        new
                        {
                            AccountStatusTypeId = (byte)5,
                            AccountStatusDescription = "Frozen"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.AuditLog", b =>
                {
                    b.Property<int?>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("AuditLogId"));

                    b.Property<string>("Action")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuditLogId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AuditLogs");

                    b.HasData(
                        new
                        {
                            AuditLogId = 1,
                            Action = "User Login",
                            ActionDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9313),
                            Details = "User logged in successfully",
                            EmployeeId = "E111111",
                            IpAddress = "192.168.1.1"
                        },
                        new
                        {
                            AuditLogId = 2,
                            Action = "Password Reset",
                            ActionDate = new DateTime(2024, 9, 19, 14, 3, 41, 808, DateTimeKind.Local).AddTicks(9318),
                            Details = "Password reset for user John",
                            EmployeeId = "E111111",
                            IpAddress = "192.168.1.2"
                        },
                        new
                        {
                            AuditLogId = 3,
                            Action = "Created New User",
                            ActionDate = new DateTime(2024, 9, 19, 13, 13, 41, 808, DateTimeKind.Local).AddTicks(9323),
                            Details = "Admin created a new user",
                            EmployeeId = "E111111",
                            IpAddress = "192.168.1.3"
                        },
                        new
                        {
                            AuditLogId = 4,
                            Action = "Failed Login Attempt",
                            ActionDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9328),
                            Details = "User failed login attempt",
                            EmployeeId = "E111111",
                            IpAddress = "192.168.1.4"
                        },
                        new
                        {
                            AuditLogId = 5,
                            Action = "Deleted Account",
                            ActionDate = new DateTime(2024, 9, 17, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9332),
                            Details = "Admin deleted user account",
                            EmployeeId = "E111112",
                            IpAddress = "192.168.1.5"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Complaint", b =>
                {
                    b.Property<int?>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ComplaintID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ComplaintId"));

                    b.Property<DateTime?>("ComplaintDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ComplaintDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ComplaintStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("ComplaintTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ComplaintTypeID");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Files")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("File");

                    b.Property<string>("ResolutionComments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime");

                    b.HasKey("ComplaintId");

                    b.HasIndex("ComplaintTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Complaint", (string)null);

                    b.HasData(
                        new
                        {
                            ComplaintId = 1,
                            ComplaintDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7283),
                            ComplaintDescription = "Issue with transaction",
                            ComplaintStatus = "Open",
                            ComplaintTypeId = 1,
                            CustomerId = "C111111",
                            EmployeeId = "E111111",
                            ResolutionComments = "Pending"
                        },
                        new
                        {
                            ComplaintId = 2,
                            ComplaintDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7312),
                            ComplaintDescription = "Incorrect charge",
                            ComplaintStatus = "Resolved",
                            ComplaintTypeId = 2,
                            CustomerId = "C111112",
                            EmployeeId = "E111112",
                            ResolutionComments = "Refunded",
                            ResolutionDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7316)
                        },
                        new
                        {
                            ComplaintId = 3,
                            ComplaintDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7330),
                            ComplaintDescription = "Account hacked",
                            ComplaintStatus = "In Progress",
                            ComplaintTypeId = 3,
                            CustomerId = "C111113",
                            EmployeeId = "E111113",
                            ResolutionComments = "Investigating"
                        },
                        new
                        {
                            ComplaintId = 4,
                            ComplaintDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7337),
                            ComplaintDescription = "Card not working",
                            ComplaintStatus = "Resolved",
                            ComplaintTypeId = 1,
                            CustomerId = "C111114",
                            EmployeeId = "E111114",
                            ResolutionComments = "Card replaced",
                            ResolutionDate = new DateTime(2024, 9, 17, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7341)
                        },
                        new
                        {
                            ComplaintId = 5,
                            ComplaintDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7346),
                            ComplaintDescription = "Unauthorized transaction",
                            ComplaintStatus = "Open",
                            ComplaintTypeId = 2,
                            CustomerId = "C111115",
                            EmployeeId = "E111111",
                            ResolutionComments = "Pending investigation"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.ComplaintFeedback", b =>
                {
                    b.Property<int?>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("FeedbackId"));

                    b.Property<int?>("ComplaintId")
                        .HasColumnType("int")
                        .HasColumnName("ComplaintID");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("FeedbackComments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("FeedbackDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("FeedbackRating")
                        .HasColumnType("tinyint");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ComplaintFeedback", (string)null);

                    b.HasData(
                        new
                        {
                            FeedbackId = 1,
                            ComplaintId = 1,
                            CustomerId = "C111111",
                            FeedbackComments = "Waiting for response",
                            FeedbackDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7619)
                        },
                        new
                        {
                            FeedbackId = 2,
                            ComplaintId = 2,
                            CustomerId = "C111112",
                            FeedbackComments = "Good service",
                            FeedbackDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7624)
                        },
                        new
                        {
                            FeedbackId = 3,
                            ComplaintId = 3,
                            CustomerId = "C111113",
                            FeedbackComments = "Please expedite",
                            FeedbackDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7630)
                        },
                        new
                        {
                            FeedbackId = 4,
                            ComplaintId = 4,
                            CustomerId = "C111114",
                            FeedbackComments = "Resolved quickly",
                            FeedbackDate = new DateTime(2024, 9, 17, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7633)
                        },
                        new
                        {
                            FeedbackId = 5,
                            ComplaintId = 5,
                            CustomerId = "C111115",
                            FeedbackComments = "Still no response",
                            FeedbackDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7639)
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.ComplaintResolution", b =>
                {
                    b.Property<int?>("ResolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResolutionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ResolutionId"));

                    b.Property<int?>("ComplaintId")
                        .HasColumnType("int")
                        .HasColumnName("ComplaintID");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EmployeeID");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ResolutionDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ResolutionMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ResolutionId");

                    b.HasIndex("ComplaintId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ComplaintResolution", (string)null);

                    b.HasData(
                        new
                        {
                            ResolutionId = 1,
                            ComplaintId = 1,
                            EmployeeId = "E111111",
                            ResolutionDate = new DateTime(2024, 9, 17, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7705),
                            ResolutionDescription = "Investigated",
                            ResolutionMethod = "Manual"
                        },
                        new
                        {
                            ResolutionId = 2,
                            ComplaintId = 2,
                            EmployeeId = "E111112",
                            ResolutionDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7712),
                            ResolutionDescription = "Refund processed",
                            ResolutionMethod = "Automatic"
                        },
                        new
                        {
                            ResolutionId = 3,
                            ComplaintId = 3,
                            EmployeeId = "E111113",
                            ResolutionDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7717),
                            ResolutionDescription = "Ongoing investigation",
                            ResolutionMethod = "Manual"
                        },
                        new
                        {
                            ResolutionId = 4,
                            ComplaintId = 4,
                            EmployeeId = "E111114",
                            ResolutionDate = new DateTime(2024, 9, 14, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7720),
                            ResolutionDescription = "Card replaced",
                            ResolutionMethod = "Automatic"
                        },
                        new
                        {
                            ResolutionId = 5,
                            ComplaintId = 5,
                            EmployeeId = "E111111",
                            ResolutionDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7724),
                            ResolutionDescription = "Waiting for confirmation",
                            ResolutionMethod = "Manual"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.ComplaintStatusHistory", b =>
                {
                    b.Property<int?>("StatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("StatusHistoryId"));

                    b.Property<int?>("ComplaintId")
                        .HasColumnType("int")
                        .HasColumnName("ComplaintID");

                    b.Property<string>("ComplaintStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("StatusComments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.HasKey("StatusHistoryId");

                    b.HasIndex("ComplaintId");

                    b.ToTable("ComplaintStatusHistory", (string)null);

                    b.HasData(
                        new
                        {
                            StatusHistoryId = 1,
                            ComplaintId = 1,
                            ComplaintStatus = "Open",
                            StatusComments = "Under review",
                            StatusDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7779)
                        },
                        new
                        {
                            StatusHistoryId = 2,
                            ComplaintId = 2,
                            ComplaintStatus = "Resolved",
                            StatusComments = "Refunded",
                            StatusDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7786)
                        },
                        new
                        {
                            StatusHistoryId = 3,
                            ComplaintId = 3,
                            ComplaintStatus = "In Progress",
                            StatusComments = "Investigation ongoing",
                            StatusDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7790)
                        },
                        new
                        {
                            StatusHistoryId = 4,
                            ComplaintId = 4,
                            ComplaintStatus = "Resolved",
                            StatusComments = "Card replaced",
                            StatusDate = new DateTime(2024, 9, 17, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7793)
                        },
                        new
                        {
                            StatusHistoryId = 5,
                            ComplaintId = 5,
                            ComplaintStatus = "Open",
                            StatusComments = "Pending",
                            StatusDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(7797)
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.ComplaintType", b =>
                {
                    b.Property<int?>("ComplaintTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ComplaintTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ComplaintTypeId"));

                    b.Property<string>("ComplaintTypeDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ComplaintTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ComplaintTypeId");

                    b.ToTable("ComplaintType", (string)null);

                    b.HasData(
                        new
                        {
                            ComplaintTypeId = 1,
                            ComplaintTypeDescription = "Transaction Issues",
                            ComplaintTypeName = "Transaction"
                        },
                        new
                        {
                            ComplaintTypeId = 2,
                            ComplaintTypeDescription = "Account Issues",
                            ComplaintTypeName = "Account"
                        },
                        new
                        {
                            ComplaintTypeId = 3,
                            ComplaintTypeDescription = "Security Breach",
                            ComplaintTypeName = "Security"
                        },
                        new
                        {
                            ComplaintTypeId = 4,
                            ComplaintTypeDescription = "Card Issues",
                            ComplaintTypeName = "Card"
                        },
                        new
                        {
                            ComplaintTypeId = 5,
                            ComplaintTypeDescription = "General Complaint",
                            ComplaintTypeName = "General"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Configuration", b =>
                {
                    b.Property<int?>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ConfigurationId"));

                    b.Property<string>("ConfigKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConfigValue")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ConfigurationId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Configurations");

                    b.HasData(
                        new
                        {
                            ConfigurationId = 1,
                            ConfigKey = "MaxLoginAttempts",
                            ConfigValue = "5",
                            Description = "Maximum number of login attempts before account lockout",
                            LastUpdated = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9376),
                            UpdatedBy = "E111111"
                        },
                        new
                        {
                            ConfigurationId = 2,
                            ConfigKey = "SessionTimeout",
                            ConfigValue = "30",
                            Description = "Session timeout duration in minutes",
                            LastUpdated = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9380),
                            UpdatedBy = "E111111"
                        },
                        new
                        {
                            ConfigurationId = 3,
                            ConfigKey = "PasswordExpirationDays",
                            ConfigValue = "90",
                            Description = "Number of days before a password expires",
                            LastUpdated = new DateTime(2024, 9, 12, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9384),
                            UpdatedBy = "E111111"
                        },
                        new
                        {
                            ConfigurationId = 4,
                            ConfigKey = "MinPasswordLength",
                            ConfigValue = "8",
                            Description = "Minimum password length for user accounts",
                            LastUpdated = new DateTime(2024, 9, 19, 11, 13, 41, 808, DateTimeKind.Local).AddTicks(9388),
                            UpdatedBy = "E111111"
                        },
                        new
                        {
                            ConfigurationId = 5,
                            ConfigKey = "EnableTwoFactorAuth",
                            ConfigValue = "true",
                            Description = "Enables or disables two-factor authentication",
                            LastUpdated = new DateTime(2024, 8, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9392),
                            UpdatedBy = "E111111"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CustomerAddress1")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CustomerAddress2")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CustomerFirstName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CustomerLastName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength();

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = "C111111",
                            CellPhone = "9876543210",
                            City = "Mumbai",
                            CustomerFirstName = "sanjeev",
                            CustomerLastName = "kumar",
                            EmailAddress = "sanjeev@example.com",
                            IsActive = false,
                            PasswordHash = "$2a$11$OHkL1HRy3y36NyBBYYBvfO0pAe/cXcyHjaNQGVRzwY5oF7WJ0gmfW",
                            State = "Maharashtra",
                            ZipCode = "10001"
                        },
                        new
                        {
                            CustomerId = "C111112",
                            CellPhone = "9876543212",
                            City = "Kolkata",
                            CustomerFirstName = "sanjay",
                            CustomerLastName = "ray",
                            EmailAddress = "sanjay@example.com",
                            IsActive = false,
                            PasswordHash = "$2a$11$AikCDWu/6ZLMmeW32R9vweqROZs5mU8XYOKJ40WhcKzpS5LycjVzi",
                            State = "west bengal",
                            ZipCode = "90001"
                        },
                        new
                        {
                            CustomerId = "C111113",
                            CellPhone = "9876543213",
                            City = "Chennai",
                            CustomerFirstName = "kumar",
                            CustomerLastName = "reddy",
                            EmailAddress = "kumar@example.com",
                            IsActive = false,
                            PasswordHash = "$2a$11$RPwqs6slsG2EEyxb.uCxROwrL3FNPKfES94crINYIKaXHVbI2M7dK",
                            State = "Tamilnadu",
                            ZipCode = "60601"
                        },
                        new
                        {
                            CustomerId = "C111114",
                            CellPhone = "9876543214",
                            City = "Kadapa",
                            CustomerFirstName = "jay",
                            CustomerLastName = "kumar",
                            EmailAddress = "jay@example.com",
                            IsActive = false,
                            PasswordHash = "$2a$11$hfVvtXmMjDkBC02029/BQ.WDWAQmnDydl/30y.6AFh7DVrNrrbKzq",
                            State = "Andhra pradesh",
                            ZipCode = "77001"
                        },
                        new
                        {
                            CustomerId = "C111115",
                            CellPhone = "9876543215",
                            City = "Amaravathi",
                            CustomerFirstName = "pavan",
                            CustomerLastName = "kumar",
                            EmailAddress = "pavan@example.com",
                            IsActive = false,
                            PasswordHash = "$2a$11$Z061t4gU066QPwobzrRoCuP/vaEKBlz1DVcbApBLO9./3JmtEMZWe",
                            State = "Andhra pradesh",
                            ZipCode = "85001"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployeeFirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployeeLastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = "E111111",
                            EmailAddress = "Amit@example.com",
                            EmployeeFirstName = "Amit",
                            EmployeeLastName = "Sharma",
                            IsActive = false,
                            PasswordHash = "$2a$11$MLTeKde/36HgFm8QhFj8jOM3KJs2FcxQgEKIerCEJBfIpMtYIkrdq"
                        },
                        new
                        {
                            EmployeeId = "E111112",
                            EmailAddress = "Neha@example.com",
                            EmployeeFirstName = "Neha",
                            EmployeeLastName = "Patel",
                            IsActive = false,
                            PasswordHash = "$2a$11$PqxiUPTmvh2CrI.OQMiMH.CiKQL/SXsTSCwwjrpIN7M.zoblI49SW"
                        },
                        new
                        {
                            EmployeeId = "E111113",
                            EmailAddress = "Raj@example.com",
                            EmployeeFirstName = "Raj",
                            EmployeeLastName = "Kumar",
                            IsActive = false,
                            PasswordHash = "$2a$11$w2QLDBCF4PmljK5IPIOUYu6PDIUa62bldhFSzZPSPqacJsVy4CRem"
                        },
                        new
                        {
                            EmployeeId = "E111114",
                            EmailAddress = "Priya@example.com",
                            EmployeeFirstName = "Priya",
                            EmployeeLastName = "Desai",
                            IsActive = false,
                            PasswordHash = "$2a$11$AmlH3HjGfiHAvjJ00cxJgOmyMU2QCM6vA2sgepqi1Nip.9rM3ggmi"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.LoanApplication", b =>
                {
                    b.Property<int?>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("LoanId"));

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Files")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Files");

                    b.Property<decimal?>("LoanAmount")
                        .HasColumnType("money");

                    b.Property<string>("LoanStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("LoanTypeId")
                        .HasColumnType("int")
                        .HasColumnName("LoanTypeID");

                    b.HasKey("LoanId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LoanTypeId");

                    b.ToTable("LoanApplication", (string)null);

                    b.HasData(
                        new
                        {
                            LoanId = 1,
                            ApplicationDate = new DateTime(2024, 9, 9, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8037),
                            ApprovalDate = new DateTime(2024, 9, 14, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8041),
                            Comments = "Approved for personal loan",
                            CustomerId = "C111111",
                            EmployeeId = "E111111",
                            LoanAmount = 10000m,
                            LoanStatus = "Approved",
                            LoanTypeId = 1
                        },
                        new
                        {
                            LoanId = 2,
                            ApplicationDate = new DateTime(2024, 9, 11, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8054),
                            ApprovalDate = new DateTime(2024, 9, 15, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8056),
                            Comments = "Approved for home loan",
                            CustomerId = "C111112",
                            EmployeeId = "E111112",
                            LoanAmount = 250000m,
                            LoanStatus = "Approved",
                            LoanTypeId = 2
                        },
                        new
                        {
                            LoanId = 3,
                            ApplicationDate = new DateTime(2024, 9, 13, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8071),
                            ApprovalDate = new DateTime(2024, 9, 16, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8074),
                            Comments = "Rejected due to insufficient credit score",
                            CustomerId = "C111113",
                            EmployeeId = "E111113",
                            LoanAmount = 5000m,
                            LoanStatus = "Rejected",
                            LoanTypeId = 1
                        },
                        new
                        {
                            LoanId = 4,
                            ApplicationDate = new DateTime(2024, 9, 15, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8080),
                            ApprovalDate = new DateTime(2024, 9, 17, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8092),
                            Comments = "Approved for car loan",
                            CustomerId = "C111114",
                            EmployeeId = "E111113",
                            LoanAmount = 20000m,
                            LoanStatus = "Approved",
                            LoanTypeId = 3
                        },
                        new
                        {
                            LoanId = 5,
                            ApplicationDate = new DateTime(2024, 9, 17, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8121),
                            ApprovalDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8123),
                            Comments = "Pending approval",
                            CustomerId = "C111115",
                            EmployeeId = "E111111",
                            LoanAmount = 15000m,
                            LoanStatus = "Pending",
                            LoanTypeId = 2
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.LoanPaymentSchedule", b =>
                {
                    b.Property<int?>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PaymentId"));

                    b.Property<decimal?>("BalanceAfterPayment")
                        .HasColumnType("money");

                    b.Property<int?>("LoanId")
                        .HasColumnType("int")
                        .HasColumnName("LoanID");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("PaymentId");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanPaymentSchedule", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            BalanceAfterPayment = 9000m,
                            LoanId = 1,
                            PaymentAmount = 1000m,
                            PaymentDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8182),
                            PaymentStatus = "Completed"
                        },
                        new
                        {
                            PaymentId = 2,
                            BalanceAfterPayment = 240000m,
                            LoanId = 2,
                            PaymentAmount = 10000m,
                            PaymentDate = new DateTime(2024, 9, 14, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8189),
                            PaymentStatus = "Completed"
                        },
                        new
                        {
                            PaymentId = 3,
                            BalanceAfterPayment = 4000m,
                            LoanId = 4,
                            PaymentAmount = 1000m,
                            PaymentDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8194),
                            PaymentStatus = "Completed"
                        },
                        new
                        {
                            PaymentId = 4,
                            BalanceAfterPayment = 15000m,
                            LoanId = 5,
                            PaymentAmount = 5000m,
                            PaymentDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8199),
                            PaymentStatus = "Pending"
                        },
                        new
                        {
                            PaymentId = 5,
                            BalanceAfterPayment = 2000m,
                            LoanId = 3,
                            PaymentAmount = 3000m,
                            PaymentDate = new DateTime(2024, 9, 16, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8203),
                            PaymentStatus = "Completed"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.LoanRepaymentLog", b =>
                {
                    b.Property<int?>("RepaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RepaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RepaymentId"));

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("LoanId")
                        .HasColumnType("int")
                        .HasColumnName("LoanID");

                    b.Property<decimal?>("RepaymentAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("RepaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RepaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RepaymentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanRepaymentLog", (string)null);

                    b.HasData(
                        new
                        {
                            RepaymentId = 1,
                            EmployeeId = "E111111",
                            LoanId = 1,
                            RepaymentAmount = 1000m,
                            RepaymentDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8267),
                            RepaymentMethod = "Bank Transfer"
                        },
                        new
                        {
                            RepaymentId = 2,
                            EmployeeId = "E111112",
                            LoanId = 2,
                            RepaymentAmount = 10000m,
                            RepaymentDate = new DateTime(2024, 9, 14, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8273),
                            RepaymentMethod = "Cheque"
                        },
                        new
                        {
                            RepaymentId = 3,
                            EmployeeId = "E111113",
                            LoanId = 4,
                            RepaymentAmount = 1000m,
                            RepaymentDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8278),
                            RepaymentMethod = "Direct Debit"
                        },
                        new
                        {
                            RepaymentId = 4,
                            EmployeeId = "E111114",
                            LoanId = 5,
                            RepaymentAmount = 5000m,
                            RepaymentDate = new DateTime(2024, 9, 19, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8282),
                            RepaymentMethod = "Bank Transfer"
                        },
                        new
                        {
                            RepaymentId = 5,
                            EmployeeId = "E111111",
                            LoanId = 3,
                            RepaymentAmount = 3000m,
                            RepaymentDate = new DateTime(2024, 9, 16, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8286),
                            RepaymentMethod = "Cheque"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.LoanType", b =>
                {
                    b.Property<int?>("LoanTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoanTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("LoanTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("LoanTypeName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LoanTypeId");

                    b.ToTable("LoanType", (string)null);

                    b.HasData(
                        new
                        {
                            LoanTypeId = 1,
                            Description = "Personal Loan",
                            InterestRate = 5.00m,
                            LoanTypeName = "Personal"
                        },
                        new
                        {
                            LoanTypeId = 2,
                            Description = "Home Loan",
                            InterestRate = 3.50m,
                            LoanTypeName = "Home"
                        },
                        new
                        {
                            LoanTypeId = 3,
                            Description = "Car Loan",
                            InterestRate = 4.00m,
                            LoanTypeName = "Car"
                        },
                        new
                        {
                            LoanTypeId = 4,
                            Description = "Education Loan",
                            InterestRate = 6.00m,
                            LoanTypeName = "Education"
                        },
                        new
                        {
                            LoanTypeId = 5,
                            Description = "Business Loan",
                            InterestRate = 7.00m,
                            LoanTypeName = "Business"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Permission", b =>
                {
                    b.Property<int?>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PermissionId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PermissionName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            Description = "View account details",
                            PermissionName = "ViewAccount"
                        },
                        new
                        {
                            PermissionId = 2,
                            Description = "Transfer funds between accounts",
                            PermissionName = "TransferFunds"
                        },
                        new
                        {
                            PermissionId = 3,
                            Description = "Create or manage accounts",
                            PermissionName = "ManageAccounts"
                        },
                        new
                        {
                            PermissionId = 4,
                            Description = "View transaction history",
                            PermissionName = "ViewTransactionHistory"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Role", b =>
                {
                    b.Property<int?>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Regular customer role",
                            RoleName = "support"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Bank employee role",
                            RoleName = "staff"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Administrative role with full access",
                            RoleName = "cashier"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Administrative role with full access",
                            RoleName = "admin"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.RolePermission", b =>
                {
                    b.Property<int?>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RolePermissionId"));

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RolePermissionId = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 2,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 3,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            RolePermissionId = 4,
                            PermissionId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 5,
                            PermissionId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 6,
                            PermissionId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            RolePermissionId = 7,
                            PermissionId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            RolePermissionId = 8,
                            PermissionId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            RolePermissionId = 9,
                            PermissionId = 3,
                            RoleId = 4
                        },
                        new
                        {
                            RolePermissionId = 10,
                            PermissionId = 4,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.SavingsInterestRate", b =>
                {
                    b.Property<byte?>("InterestSavingsRateId")
                        .HasColumnType("tinyint")
                        .HasColumnName("InterestSavingsRateID");

                    b.Property<string>("InterestRateDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("InterestRateValue")
                        .HasColumnType("numeric(9, 9)");

                    b.HasKey("InterestSavingsRateId");

                    b.ToTable("SavingsInterestRates");

                    b.HasData(
                        new
                        {
                            InterestSavingsRateId = (byte)1,
                            InterestRateDescription = "Basic Savings",
                            InterestRateValue = 0.01m
                        },
                        new
                        {
                            InterestSavingsRateId = (byte)2,
                            InterestRateDescription = "High Yield",
                            InterestRateValue = 0.02m
                        },
                        new
                        {
                            InterestSavingsRateId = (byte)3,
                            InterestRateDescription = "Premium",
                            InterestRateValue = 0.03m
                        },
                        new
                        {
                            InterestSavingsRateId = (byte)4,
                            InterestRateDescription = "Gold",
                            InterestRateValue = 0.04m
                        },
                        new
                        {
                            InterestSavingsRateId = (byte)5,
                            InterestRateDescription = "Platinum",
                            InterestRateValue = 0.05m
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.TransactionLog", b =>
                {
                    b.Property<int?>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TransactionId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal?>("NewBalance")
                        .HasColumnType("money");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("money");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("TransactionTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("TransactionTypeID");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("TransactionLog", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            AccountId = 1,
                            CustomerId = "C111111",
                            EmployeeId = "E111111",
                            NewBalance = 6000m,
                            TransactionAmount = 1000m,
                            TransactionDate = new DateTime(2024, 9, 18, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8735),
                            TransactionTypeId = (byte)1
                        },
                        new
                        {
                            TransactionId = 2,
                            AccountId = 2,
                            CustomerId = "C111112",
                            EmployeeId = "E111112",
                            NewBalance = 14000m,
                            TransactionAmount = 1000m,
                            TransactionDate = new DateTime(2024, 9, 17, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(8743),
                            TransactionTypeId = (byte)2
                        },
                        new
                        {
                            TransactionId = 3,
                            AccountId = 3,
                            CustomerId = "C111113",
                            EmployeeId = "E111113",
                            NewBalance = 24000m,
                            TransactionAmount = 1000m,
                            TransactionDate = new DateTime(2024, 9, 16, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9011),
                            TransactionTypeId = (byte)3
                        },
                        new
                        {
                            TransactionId = 4,
                            AccountId = 4,
                            CustomerId = "C111114",
                            EmployeeId = "E111114",
                            NewBalance = 34000m,
                            TransactionAmount = 1000m,
                            TransactionDate = new DateTime(2024, 9, 15, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9021),
                            TransactionTypeId = (byte)4
                        },
                        new
                        {
                            TransactionId = 5,
                            AccountId = 5,
                            CustomerId = "C111115",
                            EmployeeId = "E111111",
                            NewBalance = 45000m,
                            TransactionAmount = 5000m,
                            TransactionDate = new DateTime(2024, 9, 14, 14, 13, 41, 808, DateTimeKind.Local).AddTicks(9032),
                            TransactionTypeId = (byte)5
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.TransactionType", b =>
                {
                    b.Property<byte?>("TransactionTypeId")
                        .HasColumnType("tinyint")
                        .HasColumnName("TransactionTypeID");

                    b.Property<decimal?>("TransactionFeeAmount")
                        .HasColumnType("money");

                    b.Property<string>("TransactionTypeDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TransactionTypeName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionTypeId = (byte)1,
                            TransactionFeeAmount = 2.00m,
                            TransactionTypeDescription = "Deposit",
                            TransactionTypeName = "Deposit"
                        },
                        new
                        {
                            TransactionTypeId = (byte)2,
                            TransactionFeeAmount = 2.50m,
                            TransactionTypeDescription = "Withdrawal",
                            TransactionTypeName = "Withdrawal"
                        },
                        new
                        {
                            TransactionTypeId = (byte)3,
                            TransactionFeeAmount = 3.00m,
                            TransactionTypeDescription = "Transfer",
                            TransactionTypeName = "Transfer"
                        },
                        new
                        {
                            TransactionTypeId = (byte)4,
                            TransactionFeeAmount = 1.00m,
                            TransactionTypeDescription = "Balance Inquiry",
                            TransactionTypeName = "Inquiry"
                        },
                        new
                        {
                            TransactionTypeId = (byte)5,
                            TransactionFeeAmount = 4.00m,
                            TransactionTypeDescription = "Fee",
                            TransactionTypeName = "Fee"
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.UserRole", b =>
                {
                    b.Property<int?>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserRoleId"));

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            EmployeeId = "E111111",
                            RoleId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            EmployeeId = "E111112",
                            RoleId = 2
                        },
                        new
                        {
                            UserRoleId = 3,
                            EmployeeId = "E111113",
                            RoleId = 3
                        },
                        new
                        {
                            UserRoleId = 4,
                            EmployeeId = "E111114",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Account", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.AccountStatusType", "AccountStatusType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountStatusTypeId")
                        .HasConstraintName("FK__Account__Account__5165187F");

                    b.HasOne("BankApplicationAPI.Models.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Account__Custome__4F7CD00D");

                    b.HasOne("BankApplicationAPI.Models.SavingsInterestRate", "InterestSavingsRate")
                        .WithMany("Accounts")
                        .HasForeignKey("InterestSavingsRateId")
                        .HasConstraintName("FK__Account__Interes__5070F446");

                    b.Navigation("AccountStatusType");

                    b.Navigation("Customer");

                    b.Navigation("InterestSavingsRate");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.AuditLog", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Employee", "Employee")
                        .WithMany("AuditLogs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__AuditLogs__Emplo__6D0D32F4");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Complaint", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.ComplaintType", "ComplaintType")
                        .WithMany("Complaints")
                        .HasForeignKey("ComplaintTypeId")
                        .HasConstraintName("FK__Complaint__Compl__787EE5A0");

                    b.HasOne("BankApplicationAPI.Models.Customer", "Customer")
                        .WithMany("Complaints")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Complaint__Custo__778AC167");

                    b.HasOne("BankApplicationAPI.Models.Employee", "Employee")
                        .WithMany("Complaints")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Complaint__Emplo__797309D9");

                    b.Navigation("ComplaintType");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.ComplaintFeedback", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Complaint", "Complaint")
                        .WithMany("ComplaintFeedbacks")
                        .HasForeignKey("ComplaintId")
                        .HasConstraintName("FK__Complaint__Compl__02FC7413");

                    b.HasOne("BankApplicationAPI.Models.Customer", "Customer")
                        .WithMany("ComplaintFeedbacks")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Complaint__Custo__03F0984C");

                    b.Navigation("Complaint");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.ComplaintResolution", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Complaint", "Complaint")
                        .WithMany("ComplaintResolutions")
                        .HasForeignKey("ComplaintId")
                        .HasConstraintName("FK__Complaint__Compl__7F2BE32F");

                    b.HasOne("BankApplicationAPI.Models.Employee", "Employee")
                        .WithMany("ComplaintResolutions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Complaint__Emplo__00200768");

                    b.Navigation("Complaint");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.ComplaintStatusHistory", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Complaint", "Complaint")
                        .WithMany("ComplaintStatusHistories")
                        .HasForeignKey("ComplaintId")
                        .HasConstraintName("FK__Complaint__Compl__7C4F7684");

                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Configuration", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Employee", "UpdatedByNavigation")
                        .WithMany("Configurations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Configura__Updat__70DDC3D8");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.LoanApplication", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Customer", "Customer")
                        .WithMany("LoanApplications")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__LoanAppli__Custo__5FB337D6");

                    b.HasOne("BankApplicationAPI.Models.Employee", "Employee")
                        .WithMany("LoanApplications")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__LoanAppli__Emplo__619B8048");

                    b.HasOne("BankApplicationAPI.Models.LoanType", "LoanType")
                        .WithMany("LoanApplications")
                        .HasForeignKey("LoanTypeId")
                        .HasConstraintName("FK__LoanAppli__LoanT__60A75C0F");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("LoanType");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.LoanPaymentSchedule", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.LoanApplication", "Loan")
                        .WithMany("LoanPaymentSchedules")
                        .HasForeignKey("LoanId")
                        .HasConstraintName("FK__LoanPayme__LoanI__6477ECF3");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.LoanRepaymentLog", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Employee", "Employee")
                        .WithMany("LoanRepaymentLogs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__LoanRepay__Emplo__68487DD7");

                    b.HasOne("BankApplicationAPI.Models.LoanApplication", "Loan")
                        .WithMany("LoanRepaymentLogs")
                        .HasForeignKey("LoanId")
                        .HasConstraintName("FK__LoanRepay__LoanI__6754599E");

                    b.Navigation("Employee");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.RolePermission", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK__RolePermi__Permi__693CA210");

                    b.HasOne("BankApplicationAPI.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__RolePermi__RoleI__68487DD7");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.TransactionLog", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Account", "Account")
                        .WithMany("TransactionLogs")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Transacti__Accou__59063A47");

                    b.HasOne("BankApplicationAPI.Models.Customer", "Customer")
                        .WithMany("TransactionLogs")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Transacti__Custo__5AEE82B9");

                    b.HasOne("BankApplicationAPI.Models.Employee", "Employee")
                        .WithMany("TransactionLogs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Transacti__Emplo__59FA5E80");

                    b.HasOne("BankApplicationAPI.Models.TransactionType", "TransactionType")
                        .WithMany("TransactionLogs")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("FK__Transacti__Trans__5812160E");

                    b.Navigation("Account");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.UserRole", b =>
                {
                    b.HasOne("BankApplicationAPI.Models.Employee", "Employee")
                        .WithMany("UserRoles")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__UserRoles__Emplo__628FA481");

                    b.HasOne("BankApplicationAPI.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__UserRoles__RoleI__6383C8BA");

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Account", b =>
                {
                    b.Navigation("TransactionLogs");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.AccountStatusType", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Complaint", b =>
                {
                    b.Navigation("ComplaintFeedbacks");

                    b.Navigation("ComplaintResolutions");

                    b.Navigation("ComplaintStatusHistories");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.ComplaintType", b =>
                {
                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Customer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("ComplaintFeedbacks");

                    b.Navigation("Complaints");

                    b.Navigation("LoanApplications");

                    b.Navigation("TransactionLogs");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Employee", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ComplaintResolutions");

                    b.Navigation("Complaints");

                    b.Navigation("Configurations");

                    b.Navigation("LoanApplications");

                    b.Navigation("LoanRepaymentLogs");

                    b.Navigation("TransactionLogs");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.LoanApplication", b =>
                {
                    b.Navigation("LoanPaymentSchedules");

                    b.Navigation("LoanRepaymentLogs");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.LoanType", b =>
                {
                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.SavingsInterestRate", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BankApplicationAPI.Models.TransactionType", b =>
                {
                    b.Navigation("TransactionLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
